# -*- coding: utf-8 -*-
"""Assistente de Petição Inicial para Advocacia - Imersão IA Alura + Google Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_BKLdPnj_q43lk8smaSytTqKdf-sUoOD
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-ADK

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Compreensão do problema --- #
##########################################
def agente_inicial(topico2, data_de_hoje):

    inicial = Agent(
        name="agente_inicial",
        model="gemini-2.5-flash-preview-04-17",
        description="Agente de compreensão do problema e de estratégia inicial",
        tools=[google_search],
        instruction=f"""
        Você é um assistente de um advogado. A sua tarefa é compreender qual a
        situação apresentada pelo cliente do advogado, que será apresentada
        resumidamente no campo {topico2}.
        Com essas informações, crie uma estratégia com quais argumentos devem
        ser apresentados na petição inicial para que o cliente alcance o seu
        objetivo.
        Mantenha os termos técnicos da área do Direito, e crie no máximo seis
        argumentos.
        """
    )

    entrada_do_agente_inicial = f"Situação do cliente: {topico2}\nData de hoje: {data_de_hoje}"

    resultado_lancamentos = call_agent(inicial, entrada_do_agente_inicial)

    return resultado_lancamentos

    # Executa o agente

################################################
# --- Agente 2: Busca de subsídios na internet para embasar a estratégia criada --- #
################################################
def agente_planejador(topico2, lancamentos):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instruções do Agente Planejador #################################################
        instruction=f"""
        Você é um assistente de um advogado. Considerando a situação do cliente e a estratégia criada,
        você deverá usar a ferramenta de busca do google (google_search) para
        procurar notícias, artigos e jurisprudências que sejam aplicáveis ao caso apresentado.
        A busca deverá ser realizada apenas com resultados dos seguintes sites:
        www.migalhas.com.br
        direitoreal.com.br/noticias
        www.jurisite.com.br/noticias_juridicas
        www.conjur.com.br
        www.jusbrasil.com.br
        Existindo informações contraditórias entre si nos resultados, você deverá dar preferência
        para as notícias mais recentes, considerando a {data_de_hoje}
        Apresente as cinco informações mais relevantes que você encontrar em cada um dos sites citados acima
        """,
        description="Agente que busca notícias e informações sobre o caso",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"situação do cliente:{topico2}\nestratégia criada: {resultado_lancamentos}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

######################################
# --- Agente 3: Revisor da estratégia e comparação com informações encontradas --- #
######################################
def agente_redator(topico2, plano_de_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.5-flash-preview-04-17",
        instruction="""
            Você é um advogado experiente e meticuluso, que está verificando o trabalho realizado no
            escritório de advocacia. Você deverá analisar se a estratégia criada para conseguir
            resolver a situação do cliente é compatível com as notícias e jurisprudências pesquisada.
            Você deverá sugerir melhorias na estratégia criada considerando a jurisprudência localizada
            """,
        description="Agente revisor e consolidador da estratégia"
    )
    entrada_do_agente_redator = f"situação do cliente: {topico2}\nestratégia criada: {resultado_lancamentos}\njurisprudência: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Buscador de Jurisprudências --- #
##########################################
def agente_revisor(topico2, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
            Você é um assistente de um advogado. Considerando a situação do cliente e o rascunho criado, verifique se há
            possibilidade para melhoras, indicando-as de forma resumida.
            Ainda, utilize a busca do google (google_search) dentro do site www.jusbrasil.com.br para encontrar
            10 jurisprudências recentes, preferencialmente dos últimos cinco anos, e que possuam pertinência e similariedade com o caso do cliente
            para serem citadas na petição inicial. A jurisprudência não poderá ser inventada, e deverá
            indicar o número completo do processo
            """,
        tools=[google_search],
        description="Agente buscador de juris."
    )
    entrada_do_agente_revisor = f"situação do cliente: {topico2}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("⚖️ Iniciando o Sistema de Auxílio de Estratégias Para PETIÇÕES INICIAIS ⚖️")

# --- Obter o Tópico do Usuário ---
topico2 = input("❓ Por favor, explique a situação do cliente para que possamos iniciar a análise do caso: ")

# Inserir lógica do sistema de agentes ################################################
if not topico2:
    print("Por favor, apresente o problema de seu cliente.")

else:
    print(f"""Obrigado! Aguarde enquanto realizamos a análise do caso e buscamos as
    mais recentes notícias e jurisprudências a respeito""")

    resultado_lancamentos = agente_inicial(topico2, data_de_hoje)
    print("\n--- Resultado do Agente 1 - Compreensão do problema e estratégias iniciais ---\n")
    display(to_markdown(resultado_lancamentos))
    print("---------------------------------------------")

    plano_de_post = agente_planejador(topico2, resultado_lancamentos)
    print("\n--- Resultado do Agente 2 - Entendimentos atuais e notícias sobre o tema ---\n")
    display(to_markdown(plano_de_post))
    print("---------------------------------------------")

    rascunho_de_post = agente_redator(topico2, plano_de_post)
    print("\n--- Resultado do Agente 3 - Estratégia a ser adotada ---\n")
    display(to_markdown(rascunho_de_post))
    print("---------------------------------------------")

    post_final = agente_revisor(topico2, rascunho_de_post)
    print("\n--- Resultado do Agente 4 - Jurisprudências ---\n")
    display(to_markdown(post_final))
    print("---------------------------------------------")